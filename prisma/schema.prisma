generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum ROLE {
  ADMIN
  USER
}

enum Langue {
  FR
  EN
  WO
}

enum TypeMedia {
  IMAGE
  VIDEO
  AUDIO
}

enum StatutEvenement {
  A_VENIR
  EN_COURS
  TERMINE
  ANNULE
}

enum TypeEvenement {
  HACKATHON
  EXPOSITION
  CONFERENCE
  ATELIER
  VISITE_GUIDEE
  SPECTACLE
  AUTRE
}

model Utilisateur {
  id                    String                 @id @default(uuid())
  nom                   String
  email                 String                 @unique
  motDePasse            String
  languePreferee        Langue                 @default(FR)
  role                  ROLE                   @default(USER)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  favoris               Favori[]
  historique            Historique[]
  inscriptionsEvenement InscriptionEvenement[]
  
  @@map("utilisateurs")
}

model Collection {
  id          String   @id @default(uuid())
  nom         String
  description String   @db.Text
  theme       String
  imageUrl    String?  @map("image_url")
  estPermanente Boolean @default(true) @map("est_permanente")
  oeuvres     Oeuvre[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("collections")
}

model Oeuvre {
  id            String        @id @default(uuid())
  titre         String
  qrCode        String        @unique @map("qr_code")
  imageUrl      String        @map("image_url")
  categorie     String
  artiste       String
  annee         Int
  localisation  String
  collectionId  String?        @map("collection_id")
  collection    Collection?    @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  descriptions  Description[]
  medias        Media[]
  favoris       Favori[]
  historique    Historique[]
  evenements    Evenement[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("oeuvres")
}

model Description {
  id       String @id @default(uuid())
  oeuvreId String @map("oeuvre_id")
  langue   Langue @default(FR)
  texte    String @db.Text
  oeuvre   Oeuvre @relation(fields: [oeuvreId], references: [id], onDelete: Cascade)

  @@unique([oeuvreId, langue])
  @@map("descriptions")
}

model Media {
  id       String    @id @default(uuid())
  oeuvreId String    @map("oeuvre_id")
  type     TypeMedia
  langue   Langue    @default(FR)
  url      String
  oeuvre   Oeuvre    @relation(fields: [oeuvreId], references: [id], onDelete: Cascade)

  @@map("medias")
}

model Favori {
  id            String      @id @default(uuid())
  utilisateurId String      @map("utilisateur_id")
  oeuvreId      String      @map("oeuvre_id")
  createdAt     DateTime    @default(now()) @map("created_at")
  utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)
  oeuvre        Oeuvre      @relation(fields: [oeuvreId], references: [id], onDelete: Cascade)

  @@unique([utilisateurId, oeuvreId])
  @@map("favoris")
}

model Historique {
  id               String      @id @default(uuid())
  utilisateurId    String      @map("utilisateur_id")
  oeuvreId         String      @map("oeuvre_id")
  dateConsultation DateTime    @default(now()) @map("date_consultation")
  utilisateur      Utilisateur @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)
  oeuvre           Oeuvre      @relation(fields: [oeuvreId], references: [id], onDelete: Cascade)

  @@map("historique")
}

model Evenement {
  id              String                 @id @default(uuid())
  titre           String
  type            TypeEvenement
  statut          StatutEvenement        @default(A_VENIR)
  description     String                 @db.Text
  dateDebut       DateTime               @map("date_debut")
  dateFin         DateTime?              @map("date_fin")
  heureDebut      String?                @map("heure_debut")
  heureFin        String?                @map("heure_fin")
  lieu            String
  organisateur    String?
  intervenant     String?
  imageUrl        String                 @map("image_url")
  capaciteMax     Int?                   @map("capacite_max")
  prix            Decimal?               @db.Decimal(10, 2)
  gratuit         Boolean                @default(true)
  lienInscription String?                @map("lien_inscription")
  lienBillet      String?                @map("lien_billet")
  estPopulaire    Boolean                @default(false) @map("est_populaire")
  tags            String[]               @default([])
  oeuvreId        String?                @map("oeuvre_id")
  oeuvre          Oeuvre?                @relation(fields: [oeuvreId], references: [id], onDelete: SetNull)
  inscriptions    InscriptionEvenement[]
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt

  @@map("evenements")
}

model InscriptionEvenement {
  id            String      @id @default(uuid())
  evenementId   String      @map("evenement_id")
  utilisateurId String      @map("utilisateur_id")
  dateInscrit   DateTime    @default(now()) @map("date_inscrit")
  statut        String      @default("confirme")
  nombrePlaces  Int         @default(1) @map("nombre_places")
  evenement     Evenement   @relation(fields: [evenementId], references: [id], onDelete: Cascade)
  utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)

  @@unique([evenementId, utilisateurId])
  @@map("inscriptions_evenement")
}